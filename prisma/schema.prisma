generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id        String      @id @default(uuid())
  name      String
  userId    String
  Billboard Billboard[] @relation("StoreToBillboard")
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  categorys Category[]  @relation("StoreToCategory")
  sizes     Size[]      @relation("StoreToSize")
  colors    Color[]     @relation("StoreToColor")
  products  Product[]   @relation("StoreToProduct")
  orders    Order[]     @relation("StoreToOrder")
}

model Billboard {
  id        String     @id @default(uuid())
  storeId   String
  store     Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label     String
  imageUrl  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  categorys Category[] @relation("BillboardToCategory")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  storeId     String
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation("BillboardToCategory", fields: [billboardId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] @relation("CategoryToProduct")
}

model Size {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("CategoryToSize")
}

model Color {
  id        String    @id @default(uuid())
  name      String
  value     String
  storeId   String
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("CategoryToSize")
}

model Product {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId String
  category   Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name       String
  price      Decimal
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  size       Size        @relation("CategoryToSize", fields: [sizeId], references: [id])
  colorId    String
  color      Color       @relation("CategoryToSize", fields: [colorId], references: [id])
  images     Image[]     @relation("ImageToCategory")
  orderItems OrderItem[] @relation("ProductToOrderItems")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation("ImageToCategory", fields: [productId], references: [id])
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] @relation("OrdersToOrderItem")
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation("OrdersToOrderItem", fields: [orderId], references: [id])
  productId String
  product   Product @relation("ProductToOrderItems", fields: [productId], references: [id])
}
